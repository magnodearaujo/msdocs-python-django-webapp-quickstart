name: test_pipeline
on: [push]

# Bloqueia o main de receber commits diretos e forÃ§a PR
# Colocar Validacoes no BASH -> Terraform

env:
  APP_NAME: dumbapp-sample
  FOLDER_NAME: '.'
  PYTHON_VERSION: '3.9'
  ARM_ACCESS_KEY: ${{secrets.ARM_ACCESS_KEY}}
  
jobs: 
  teste:
    runs-on: ubuntu-latest
    steps:
      - name: repo checkout
        uses: actions/checkout@v4
      - name: python setup
        uses: actions/setup-python@v1
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: azure login
        uses: azure/login@v1
        with: 
          creds: '${{secrets.azure_credentials}}'
      - name: pip install
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt
      - name: HashiCorp - Setup Terraform      
        uses: hashicorp/setup-terraform@v2.0.3

      - name: Terraform run
        working-directory: './terraform'
        run: |
          terraform init
          terraform plan
          terraform apply
        
#  with:
#    # The hostname of a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file. Defaults to `app.terraform.io`.
#    cli_config_credentials_hostname: # optional, default is app.terraform.io
#    # The API token for a Terraform Cloud/Enterprise instance to place within the credentials block of the Terraform CLI configuration file.
#    cli_config_credentials_token: # optional
#    # The version of Terraform CLI to install. Instead of full version string you can also specify constraint string starting with "<" (for example `<1.13.0`) to install the latest version satisfying the constraint. A value of `latest` will install the latest version of Terraform CLI. Defaults to `latest`.
#    terraform_version: # optional, default is latest
#    # Whether or not to install a wrapper to wrap subsequent calls of the `terraform` binary and expose its STDOUT, STDERR, and exit code as outputs named `stdout`, `stderr`, and `exitcode` respectively. Defaults to `true`.
#    terraform_wrapper: # optional, default is true

          
#      - name:
#        run: |
#          az webapp up --runtime PYTHON:${{env.PYTHON_VERSION}} --sku ${{vars.SKU_TYPE}} --logs --location ${{vars.REGION}} --name ${{env.FOLDER_NAME}}
          
#          --resource-group ${{vars.RESOURCE_GROUP}}
        
      - name: deploy webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{env.APP_NAME}}
          package: ${{env.FOLDER_NAME}}
          startup-command: 'python manage.py runserver'
          resource-group-name: ${{vars.RESOURCE_GROUP}}
      

